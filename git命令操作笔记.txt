
###################################################
# Git初始化(生成demo目录,并生成.git文件夹(本地仓库))
git init demo  	

# 设置常量 (alias:命令关键字别名)
git config --global alias.ci commit 


###################################################
# 查看文件状态 (ignored 显示被忽略类型的 , -s 精简状态显示 , -b 显示当前分支名称)
git status --ignored -s -b

git log

# 查看最近提交情况
git cat-file -p <commit_id>

# 查看当前的工作分支
git branch

#忽略只对于为加入版本库的本地文件有效, 已加入版本库则无效
#添加css文件忽略(git add 时失败.  但是git add -f 还是可以添加)
$ cat > .gitignore << EOF
> *.css
> EOF

###################################################
# 修改比较(工作区与暂存区stage)
git diff

# 修改比较(工作区与HEAD,当前工作分支)
git diff HEAD

# 修改比较(暂存区与HEAD,当前工作分支)
git diff --cached 或者 --staged


###################################################
# 添加文件版本控制
git add hello.txt

# 交互式操作文件界面
git add -i 

# 文件移动(默认移动到.ha文件夹,  如果不存在则改名为.ha)
git mv .welcome.txt .ha

# 文件改名
git mv welcome.txt README.MD

# 文件删除(移除出stash并删除)
git rm -f welcome.txt



###################################################
# 删除本地多余的目录
git clean -nd

# 强制删除多余的目录和文件
git clean -fd


###################################################
# 检出对应分支
git checkout branchname

# 从暂存区检出至工作区,即替换本地未保存的修改
git checkout

# 根据路径检出
git checkout -q


###################################################
# 将本地修改提交到本地仓库中 (跳过stag 暂存区)
git commit -m "提交日志"

# 将本地修改提交到本地仓库中 (跳过stag 暂存区) 对本地所有变更的文件提交,包括(修改,删除)但不包括未被版本追踪的文件
git commit -a -m "提交日志"


###################################################
# 硬回滚 ::回滚本地仓库修改(commitId:回滚到的版本SHA1值) 会回滚工作区
git reset --hard <commit_id>

# 软回滚 ::回滚本地仓库修改(commitId:回滚到的版本SHA1值), 不会回滚工作区,只回滚暂存区,保留已进行的修改.
git reset --soft <commitId> 


###################################################
# 保存当前工作进度(将工作区和暂存区的改动封存), 并将工作区修改删除
git stash

# 保存当前工作进度(将工作区和暂存区的改动封存),显示进度列表
git stash list

# 回归,恢复当前工作进度
git stash pop

# 删除一个存储的工作进度(丢弃, 暂存区最新的进度删除)
git stash drop

# 删除所有存储的进度(丢弃, 暂存区进度删除)
git stash clear


###################################################
# 文件归档 (对于未忽略目录树建立归档)
git archive -o test.zip HEAD

# 文件归档 (对于指定文件夹建立归档)
git archive -o test.rar HEAD src doc


#查看包含的引用
git show-ref




















