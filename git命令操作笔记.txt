
###################################################
# Git初始化(生成demo目录,并生成.git文件夹(本地仓库))
git init demo  	

# 设置常量 (alias:命令关键字别名)
git config --global alias.ci commit 

###################################################
# 查看文件状态 (-s 精简状态显示 , -b 显示当前分支名称)
git status -s -b

git log

# 查看最近提交情况
git cat-file -p <commit_id>

# 查看当前的工作分支
git branch


###################################################
# 修改比较(工作区与暂存区stage)
git diff

# 修改比较(工作区与HEAD,当前工作分支)
git diff HEAD

# 修改比较(暂存区与HEAD,当前工作分支)
git diff --cached 或者 --staged


###################################################
# 添加文件版本控制
git add hello.txt

###################################################
# 将本地修改提交到本地仓库中 (跳过stag 暂存区)
git commit -m "提交日志"

# 将本地修改提交到本地仓库中 (跳过stag 暂存区) 对本地所有变更的文件提交,包括(修改,删除)但不包括未被版本追踪的文件
git commit -a -m "提交日志"

###################################################
# 硬回滚 ::回滚本地仓库修改(commitId:回滚到的版本SHA1值)
git reset --hard <commit_id>

# 软回滚 ::回滚本地仓库修改(commitId:回滚到的版本SHA1值), 并保留已进行的修改.
git reset --soft <commitId> 


###################################################
# 保存当前工作进度(将工作区和暂存区的改动封存)
git stash


# 恢复当前工作进度
git stash pop










