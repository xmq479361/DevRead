
###################################################
# Git初始化(生成demo目录,并生成.git文件夹(本地仓库))
git init demo  	

# 设置常量 (alias:命令关键字别名)
git config --global alias.ci commit 

生成密钥
ssh-keygen -t rsa -C "humingx@yeah.net"

eval "$(ssh-agent -s)"
++++++  Agent pid 59566
ssh-add ~/.ssh/id_rsa

ssh-agent


###################################################
# 查看文件状态 (ignored 显示被忽略类型的 , -s 精简状态显示 , -b 显示当前分支名称)
git status --ignored -s -b

git log


# 查看最近提交情况
git cat-file -p <commit_id>


#忽略只对于为加入版本库的本地文件有效, 已加入版本库则无效
#添加css文件忽略(git add 时失败.  但是git add -f 还是可以添加)
$ cat > .gitignore << EOF
> *.css
> EOF

#修改取消对trunk文件忽略追踪(本地修改不加入提交)
git update-index --assume-unchanged
git update-index --no-assume-unchanged #继续追踪

###################################################
# 修改比较(工作区与暂存区stage)
git diff

# 修改比较(工作区与HEAD,当前工作分支)
git diff HEAD

# 修改比较(暂存区与HEAD,当前工作分支)
git diff --cached 或者 --staged


###################################################
# 添加文件版本控制
git add hello.txt

# 交互式操作文件界面
git add -i 

# 文件移动(默认移动到.ha文件夹,  如果不存在则改名为.ha)
git mv .welcome.txt .ha

# 文件改名
git mv welcome.txt README.MD

# 文件删除(移除出stash并删除)
git rm -f welcome.txt



###################################################
# 删除本地多余的目录
git clean -nd

# 强制删除多余的目录和文件
git clean -fd


###################################################
# 检出对应分支
git checkout branchname

# 从暂存区检出至工作区,即替换本地未保存的修改
git checkout

# 根据路径检出
git checkout -q

git checkout [-m] [ [-b | -- orphan ] <new_branch>]  [start_point] 
###################################################
# 将本地修改提交到本地仓库中 (跳过stag 暂存区)
git commit -m "提交日志"

# 将本地修改提交到本地仓库中 (跳过stag 暂存区) 对本地所有变更的文件提交,包括(修改,删除)但不包括未被版本追踪的文件
git commit -a -m "提交日志"

#修改已提交的注释内容
git commit --amend


###################################################
# 硬回滚 ::回滚本地仓库修改(commitId:回滚到的版本SHA1值) 会回滚工作区
git reset --hard <commit_id>

# 软回滚 ::回滚本地仓库修改(commitId:回滚到的版本SHA1值), 不会回滚工作区,只回滚暂存区,保留已进行的修改.
git reset --soft <commitId> 

许孟秋
###################################################
# 保存当前工作进度(将工作区和暂存区的改动封存), 并将工作区修改删除
git stash

# 保存当前工作进度(将工作区和暂存区的改动封存),显示进度列表
git stash list

# 回归,恢复当前工作进度
git stash pop

# 删除一个存储的工作进度(丢弃, 暂存区最新的进度删除)
git stash drop

# 删除所有存储的进度(丢弃, 暂存区进度删除)
git stash clear


###################################################
# 文件归档 (对于未忽略目录树建立归档)
git archive -o test.zip HEAD

# 文件归档 (对于指定文件夹建立归档)
git archive -o test.rar HEAD src doc


#查看包含的引用
git show-ref


#git将本地仓库上传到远程仓库
1. git init
2. git add .
3. git commit -am "###"      -------以上3步只是本地提交
4.git remote add origin git@xx.xx.xx.xx:repos/xxx/xxx/xxx.git
5.git push origin 本地分支:远程分支

###################################################
1.git branch							# 显示分支列表
2.git branch <branchname> 				# 创建分支(基于当前头指针)
3.git branch <branchname> <start-point>	# 创建分支(基于提交)
4.git branch -d <branchname> 			# 删除分支(检查是否已经合并到其他分支中)
5.git branch -D <branchname> 			# 删除分支(不检查)
6.git branch -m <oldbranch> <newbranch> # 重命名分支(检查是否已经存在相同名称)
6.git branch -M <oldbranch> <newbranch> # 重命名分支(不检查)

#创建分支并提交到远程
git branch develop
git push -u origin develop
# 创建功能开发分支
git checkout -b some-feature develop

# 切换工作分支
git checkout <branchname>

# 创建并切换工作分支
git checkout -b <new-branchname> [<start_point>]

###################################################解决冲突 
#自动合并,解决冲突
git fetch 
git merge refs/remotes/origin/<branchname>
# 文件内容冲突,则需手动比较修改
git add <conflictfile> #冲突文件添加
git commit -m "解决冲突日志.."
git push origin <branchname>

####在 git merge 的时候，加上 --no-ff 参数，是为了让它生成一个新的 commit，这样就可以提交了~（不过生成的 gerrit change 是看不到改动信息的）

	# 如果失败,则手动执行
	git pull --no-commit origin develop

E:\devGitPath/trunk/Src/ZM_CJ430_AndroidMailClient/config.gradle
###################################################删除远程分支和tag

在Git v1.7.0 之后，可以使用这种语法删除远程分支：

$ git push origin --delete <branchName>
删除tag这么用：

git push origin --delete tag <tagname>

否则，可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支：

git push origin :<branchName>
这是删除tag的方法，推送一个空tag到远程tag：

git tag -d <tagname>
git push origin :refs/tags/<tagname>
两种语法作用完全相同。
git push origin:HEAD:refs/for/master%r=xu.mengqiu@zte.com.cn


